<?xml version="1.0" encoding="utf-8"?>
<ScrollView xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:background="@drawable/archbg"
    tools:context=".whylinux"
    tools:ignore="SpeakableTextPresentCheck">

    <LinearLayout
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:orientation="vertical">

        <androidx.constraintlayout.widget.ConstraintLayout
            android:id="@+id/front1"
            android:layout_width="match_parent"
            android:layout_height="3535dp"
            android:background="@drawable/archbg"
            tools:context=".whylinux">


            <TextView
                android:id="@+id/textView4"
                android:layout_width="0dp"
                android:layout_height="wrap_content"
                android:layout_marginStart="20dp"
                android:layout_marginLeft="20dp"
                android:layout_marginTop="37dp"
                android:layout_marginEnd="20dp"
                android:layout_marginRight="20dp"
                android:gravity="center"
                android:text="VIM EDITOR"
                android:textColor="#FFFFFF"
                android:textSize="30sp"
                app:layout_constraintEnd_toEndOf="parent"
                app:layout_constraintStart_toStartOf="parent"
                app:layout_constraintTop_toTopOf="parent" />

            <TextView
                android:id="@+id/textView5"
                android:layout_width="0dp"
                android:layout_height="wrap_content"
                android:layout_marginStart="20dp"
                android:layout_marginLeft="20dp"
                android:layout_marginTop="108dp"
                android:layout_marginEnd="20dp"
                android:layout_marginRight="20dp"
                android:text="
VIM has been around since 1991, it is one of the oldest text editors still around today and it is still around for a reason. It is extremely versatile and available on an array of different platforms, including, believe it or not, the Amiga and the Atari ST. Yes really, it has existed in one form or fashion since the days of the 486 and the infancy of Windows.\n\n
It is an extremely versatile and dynamic text editor that extends the capabilities of the Vi Unix editor. Vim is highly configurable and an editor that is really built for developers. It’s true potential is unlikely to be appreciated by a beginner, certainly not at first. However, for those with experience in programming, once mastered it is ultimately the king of text selection, even better than Sublime.\n\n
By default, Vim supports several programming languages and file formats. It can detect the type of file that is being edited; this is done by checking the file name and sometimes by inspecting the contents of the file for specific text.\n\n
Vim’s strengths are its smallness and simplicity, therefore it doesn’t consume a considerable amount of system resources as opposed to other text editors especially graphical text editors.

It’s also normally very fast and lightweight even when editing huge files of source code. It’s easy to run over ssh for remote operations on any server.

Furthermore, its offers highly effective key-bindings thus allowing you to carry out any imaginable tasks without lifting your fingers from the keyboard. Even with its simplicity, Vim has many capabilities and is very efficient once learned.\n\n
Vim’s configurations are portable, this enables you to use the same configs on all your Linux systems. You can as well share configs with friends on the Internet and so on. All you need to to do is copy a few directories and files, and that’s all.\n\n
Vim is thoroughly documented, meaning you will find most of the answers to your questions in its help system; from books to extensive help files to an assortment of tips. All you have to do is use the appropriate keywords in your help queries.

Additionally, Vim comes with a useful built-in manual, you can launch it using the :help command once the program is started. This built-in manual contains more information than Vim’s man page.\n\n
When you run vim filename to edit a file, Vim starts out in command mode. This means that all the alphanumeric keys are bound to commands, rather than inserting those characters. Typing j won’t insert the character “j”–it will move the cursor down one line. Typing dd will delete an entire line, rather than inserting “dd.”

To enter the insert mode, type i (for “insert”) and now the keys will behave as you’d expect. You can type normally until you want to make a correction, save the file, or perform another operation that’s reserved for command mode or last-line mode. To get out of insert mode, hit the Escape key.

Once you press Escape, you’re in command mode again. What if you’d like to save your file or search through your document? No problem, press : and Vim will switch to last-line mode. Vim is now waiting for you to enter a command like :w to write the file or :q to exit the editor.\n\n
The first thing you’ll want to learn is how to move around a file. When you’re in command mode, you’ll want to remember the following keys and what they do:
\n\n
\n---h moves the cursor one character to the left.
\n---j moves the cursor down one line.
\n---k moves the cursor up one line.
\n---l moves the cursor one character to the right.
\n---0 moves the cursor to the beginning of the line.
\n---$ moves the cursor to the end of the line.
\n---w move forward one word.
\n---b move backward one word.
\n---G move to the end of the file.
---gg move to the beginning of the file.\n
---`. move to the last edit.\n
---d starts the delete operation.
\n---dw will delete a word.
\n---d0 will delete to the beginning of a line.
\n---d$ will delete to the end of a line.
\n---dgg will delete to the beginning of the file.
\n---dG will delete to the end of the file.
\n---u will undo the last operation.
\n---Ctrl-r will redo the last undo.
Here’s a handy tip: prefacing a movement command with a number will execute that movement multiple times. So, if you want to move up six lines, enter 6k and Vim will move the cursor up six lines. If you want to move over five words, enter 5w. To move 10 words back, use 10b.\n\n"
                android:textColor="#fff"
                android:textSize="20sp"
                app:layout_constraintEnd_toEndOf="parent"
                app:layout_constraintHorizontal_bias="1.0"
                app:layout_constraintStart_toStartOf="parent"
                app:layout_constraintTop_toTopOf="parent" />
        </androidx.constraintlayout.widget.ConstraintLayout>
    </LinearLayout>
</ScrollView>
